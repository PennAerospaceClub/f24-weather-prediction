# -*- coding: utf-8 -*-
"""PAC Weather Prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fLzJgUMWTj6y6gqluc-0-VzuMufthjHB

This notebook aims to create a Random Forest model that will predict temperature given latitude, longitude, altitude, humidity, pressure.

**Add *PastLaunchData.csv* to the notebook files**

# Cleaning the Data

We will first clean and scale the data. Here, we will:
*   drop any unnecessary columns
  * including duplicate columns and weather balloon flight data
*   seperate our data into features and target variables
*   fill in any missing data with the median
*   split data for test/train
*   scale the data
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.preprocessing import StandardScaler
import numpy as np

# Load the data
file_path = "/content/PastLaunchData.csv"
data = pd.read_csv(file_path)

# Drop unnecessary columns (like unnamed or duplicated temperature columns)
data = data.drop(columns=["Unnamed: 1", "TEMP.1", "EULERX", "EULERY", "EULERZ",
                          "COURSE", "NUM SATS", "VEL DIFF"], errors='ignore')

# Convert all columns to numeric, coercing errors to NaN
data = data.apply(pd.to_numeric, errors='coerce')

# Fill missing values with the median of each column
data.fillna(data.median(), inplace=True)

# Separate features and target variable
X = data.drop(columns=["TEMP"], errors='ignore')  # Features (exclude TEMP)
y = data["TEMP"]  # Target variable (temperature)

# Convert TIME column to numeric, handle any non-numeric entries by coercing them to NaN
X['TIME'] = pd.to_numeric(X['TIME'], errors='coerce')

# Fill NaN values in the TIME column with the median value of the column
X['TIME'].fillna(X['TIME'].median(), inplace=True)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the feature data
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

"""# Training the Random Forest Model
In this section, we will use our cleaned data to train a Random Forest model.
"""

# Initialize and train the Random Forest Regressor
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train_scaled, y_train)

# Make predictions on the test set
y_pred = rf_model.predict(X_test_scaled)

# Evaluate the model's performance
mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))

print("Mean Absolute Error (MAE):", mae)
print("Root Mean Squared Error (RMSE):", rmse)

"""After fitting model to our training data and testing the model on our test dataset, we arrive at a MAE of 0.0203 and RMSE of 0.0463, which is considered accurate."""

# Print all feature variable names (excluding the target variable "TEMP")
feature_columns = X.columns.tolist()
print("Feature Variables:")
for feature in feature_columns:
  print(feature)

"""# Model Visualization"""

import matplotlib.pyplot as plt
import pandas as pd

# Get feature importances
feature_importances = pd.Series(rf_model.feature_importances_, index=X.columns)

# Plot feature importances
plt.figure(figsize=(10, 6))
feature_importances.sort_values().plot(kind='barh')
plt.title("Feature Importance in Random Forest Model")
plt.xlabel("Importance Score")
plt.show()

# Scatter plot for actual vs predicted values
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, alpha=0.5)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
plt.xlabel("Actual Temperature")
plt.ylabel("Predicted Temperature")
plt.title("Actual vs Predicted Temperature")
plt.show()

import seaborn as sns

# Calculate errors
errors = y_test - y_pred

# Plot error distribution
plt.figure(figsize=(8, 6))
sns.histplot(errors, kde=True)
plt.xlabel("Prediction Error (Actual - Predicted)")
plt.title("Distribution of Prediction Errors")
plt.show()